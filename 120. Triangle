### [120\. Triangle](https://leetcode.com/problems/triangle/)

Difficulty: **Medium**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Dynamic Programming](https://leetcode.com/tag/dynamic-programming/)


Given a `triangle` array, return _the minimum path sum from top to bottom_.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.

**Example 1:**

```
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
```

**Example 2:**

```
Input: triangle = [[-10]]
Output: -10
```

**Constraints:**

*   `1 <= triangle.length <= 200`
*   `triangle[0].length == 1`
*   `triangle[i].length == triangle[i - 1].length + 1`
*   `-10<sup>4</sup> <= triangle[i][j] <= 10<sup>4</sup>`

**Follow up:** Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?

#### Solution

Language: **C++**

```c++
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<vector<int>> dp(n, vector<int> (n));
        dp[0][0]=triangle[0][0];
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<triangle[i].size();j++)
            {
                if(j==0)
                {
                    dp[i][j]=triangle[i][j]+dp[i-1][j];
                }
                else
                {
                    dp[i][j]=triangle[i][j]+min(((triangle[i-1].size()>j)? dp[i-1][j]:INT_MAX),dp[i-1][j-1]);
                }                
            }
        }
        
        int res=INT_MAX;
        for(int i=0;i<dp[n-1].size();i++)
        {
            res=min(res,dp[n-1][i]);
        }
        return res;
    }
};
​
```
