### [931\. Minimum Falling Path Sum](https://leetcode.com/problems/minimum-falling-path-sum/)

Difficulty: **Medium**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Dynamic Programming](https://leetcode.com/tag/dynamic-programming/), [Matrix](https://leetcode.com/tag/matrix/)


Given an `n x n` array of integers `matrix`, return _the **minimum sum** of any **falling path** through_ `matrix`.

A **falling path** starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.

**Example 1:**

```
Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum underlined below:
[[2,1,3],      [[2,1,3],
 [6,5,4],       [6,5,4],
 [7,8,9]]       [7,8,9]]
```

**Example 2:**

```
Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is underlined below:
[[-19,57],
 [-40,-5]]
```

**Example 3:**

```
Input: matrix = [[-48]]
Output: -48
```

**Constraints:**

*   `n == matrix.length`
*   `n == matrix[i].length`
*   `1 <= n <= 100`
*   `-100 <= matrix[i][j] <= 100`


#### Solution

Language: **C++**

```c++
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size(),dp[n][n];
        
        for(int i=0;i<n;i++)
        {
            dp[0][i]=matrix[0][i];
        }
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                int up=dp[i-1][j],left=INT_MAX,right=INT_MAX;
        
                if(j-1>=0)   left=dp[i-1][j-1];
                if(j+1<n)   right=dp[i-1][j+1];
                dp[i][j]=matrix[i][j]+min({up,left,right});
            }
        }
        int res=INT_MAX;
        for(int i=0;i<n;i++)
        {
            res=min(res,dp[n-1][i]);
        }
        
        return res;
    }
};
```
